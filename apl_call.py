# -*- coding: utf-8 -*-
"""APL_Call.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17vxZ5dyUZTrqxzNnWSruNQ3XUyP2M_pZ
"""



import pandas as pd
import joblib
import re
import googlemaps

def preprocess_data(data):
    """Preprocess the input data."""
    # Fill in missing Actual Dates with Planned Dates
    data['Actual Pickup Date and Time'].fillna(data['Planned Pickup Date and Time'], inplace=True)
    data['Actual Delivery Date and Time'].fillna(data['Planned Delivery Date and Time'], inplace=True)

    # Function to extract day, month, year from a datetime column
    def extract_date_parts(date_column):
        data[f'Actual {date_column.split()[1]} Month'] = pd.to_datetime(data[date_column]).dt.month
        data[f'Actual {date_column.split()[1]} Day'] = pd.to_datetime(data[date_column]).dt.day
        data[f'Actual {date_column.split()[1]} Year'] = pd.to_datetime(data[date_column]).dt.year

    # Extracting date parts for Actual Pickup and Delivery Dates
    extract_date_parts('Actual Pickup Date and Time')
    extract_date_parts('Actual Delivery Date and Time')

    # Calculate Time Difference (Hours) between Actual Delivery and Pickup
    data['Time Difference (Hours)'] = (pd.to_datetime(data['Actual Delivery Date and Time']) - pd.to_datetime(data['Actual Pickup Date and Time'])).dt.total_seconds() / 3600

    # Ensure 'Time Difference (Hours)' is a float
    data['Time Difference (Hours)'] = data['Time Difference (Hours)'].astype(float)

    # Create 'Weight Unit of measure (LB)' column
    def calculate_weight_lb(row):
        if row['Weight Unit of measure'] == 'LB':
            return row['Shipment Weight']
        elif row['Weight Unit of measure'] == 'KG':
            return row['Shipment Weight'] * 2.20462262
        else:
            return 0  # Handle other cases if necessary

    data['Weight Unit of measure (LB)'] = data.apply(calculate_weight_lb, axis=1)

    gmaps = googlemaps.Client(key='AIzaSyCiHiAAjvyaM03fhqrtwDKKkK5z9_Ar_bs')  # Replace with your API key

    def get_travel_time(pickup_city, pickup_state, pickup_postal, delivery_city, delivery_state, delivery_postal):
        """Calculate travel time between pickup and delivery locations."""
        # Construct the origin and destination addresses
        origin = f"{pickup_city}, {pickup_state}, {pickup_postal}, USA"
        destination = f"{delivery_city}, {delivery_state}, {delivery_postal}, USA"

        # Make a request to the Distance Matrix API
        matrix = gmaps.distance_matrix(origin, destination, mode='driving', units='imperial')

        # Extract the travel time from the response
        try:
            travel_time = matrix['rows'][0]['elements'][0]['duration']['text']
            return travel_time
        except KeyError:
            return "Unavailable"

    # Apply the get_travel_time function to create a new 'Travel Time' column
    data['Travel Time'] = data.apply(lambda row: get_travel_time(row['Pickup City'], row['Pickup Location State Code'], row['Pickup Location Postal Code'],
                                                                 row['Delivery City'], row['Delivery Location State Code'], row['Delivery Location Postal Code']), axis=1)

    # Function to convert time string to minutes
    def convert_to_minutes(time_str):
        """Convert time string to minutes."""
        if isinstance(time_str, str):  # Check if it's a string
            pattern = r'(\d+)\s*hours?\s*(\d*)\s*mins?'
            match = re.match(pattern, time_str)
            if match:
                hours = int(match.group(1))
                mins = int(match.group(2)) if match.group(2) else 0
                total_mins = hours + mins/60
                return total_mins
        return 0

    # Apply convert_to_minutes function to 'Travel Time' column
    data['Travel Time (hours)'] = data['Travel Time'].apply(convert_to_minutes)

    selected_columns = [
        'Actual Pickup Month', 'Actual Pickup Day', 'Actual Pickup Year',
        'Actual Delivery Month', 'Actual Delivery Day', 'Actual Delivery Year', 'Weight Unit of measure (LB)',
        'Time Difference (Hours)', 'Average Hourly Wage', 'Fuel Rate /Gallon', 'Level of Disruption', 'Travel Time (hours)'
    ]

    preprocessed_data = data[selected_columns].copy()

    return preprocessed_data

def load_model(model_file):
    """Load the pre-trained model from the specified file."""
    model = joblib.load(model_file)
    return model

def make_prediction(model, preprocessed_data):
    """Make predictions using the loaded model."""
    predictions = model.predict(preprocessed_data)
    preprocessed_data['Predictions'] = predictions
    return preprocessed_data
